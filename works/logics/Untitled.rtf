{\rtf1\ansi\ansicpg1252\cocoartf2865
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 AppleColorEmoji;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28260\viewh13700\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 ### **I. Python Theory & Fundamentals**\
\
These questions test the candidate's understanding of core Python concepts.\
\
**1. Basic Concepts & Data Types**.  
\f1\b\fs36 1 
\f2\b0 \uc0\u9989 
\f0\fs24 \
*   What are the key features of Python? (e.g., Interpreted, Dynamic Typing, Object-Oriented) 
\f2 \uc0\u9989 
\f0 \
*   Differentiate between a list and a tuple. When would you use one over the other? 
\f2 \uc0\u9989 
\f0 \
*   What is a Python dictionary? How is it implemented? (Hint: Hash Tables)  dict example 
\f2 \uc0\u9989 
\f1\b \
*   Explain the difference between `deepcopy` and `shallow copy`. Toys 
\f0\b0 \
\
*   What are the common built-in data types in Python? 
\f2 \uc0\u9989 
\f0 \
\
**2. Functions & Scope**  
\f1\b\fs30 2 
\f2\b0 \uc0\u9989 
\f0\fs24 \
*   What is the difference between `*args` and `**kwargs`? Give an example.
\f1\b  
\f2\b0 \uc0\u9989 
\f0 \
*   What is a lambda function? Provide a use case.  
\f2 \uc0\u9989 
\f0 \
*   Explain the concept of `pass`, `continue`, and `break` statements. 
\f2 \uc0\u9989 
\f0 \
*   What is the purpose of the `if __name__ == "__main__":` statement? 
\f2 \uc0\u9989 
\f0 \
* 
\f1\b   
\f0\b0 What is a docstring? Why is it important? 
\f2 \uc0\u9989 
\f0 \
\
**3. Object-Oriented Programming (OOP)** 
\f1\b\fs32 3 \

\f0\b0\fs24 \
*   Explain the four pillars of OOP: Abstraction, Encapsulation, Inheritance, and Polymorphism.\
*   What is the difference between a class and an instance? \
*   What is `self` in a Python class? \
*   What is method overriding and method overloading? (Note: Python doesn't support traditional overloading, so their answer is telling).\
*   What is a constructor in Python? (`__init__` method)  
\f2 \uc0\u9989 
\f0 \
	\
**4. Advanced Concepts** 
\f1\b\fs34 4
\f0\b0\fs24 \
*   
\f1\b What are Python decorators? Can you explain how they work?
\f0\b0 \
*   
\f1\b What are generators in Python? How are they different from normal functions that return a list? (`yield` vs `return`)
\f0\b0 \
*   
\f1\b What are iterators?\
*   What is the difference between a module and a package?\
*   How is memory managed in Python? (Garbage Collection, Reference Counting)\

\f0\b0 \
**5. Exception Handling** 
\f1\b\fs32 5
\f0\b0\fs24 \
*   
\f1\b What is the purpose of a `try...except` block?\
*   Explain the `else` and `finally` clauses in exception handling.
\f0\b0 \
\
---\
\
### **II. Coding Problems (Practical Application)**\
\
These problems test the candidate's ability to translate logic into code. Ask them to write code on a whiteboard, in a shared editor (like CoderPad or HackerRank), or simply explain their approach.\
\
**Easy Level (To build confidence and check basic syntax)** 
\f1\b\fs34 6
\f0\b0\fs24 \
1.  **FizzBuzz:** Write a program that prints numbers from 1 to 100. But for multiples of three, print "Fizz" instead of the number, and for multiples of five, print "Buzz". For numbers which are multiples of both three and five, print "FizzBuzz". 
\f2 \uc0\u9989 
\f0 \
2.  **Reverse a String:** Write a function to reverse a string (e.g., "hello" -> "olleh"). Don't use the built-in `reverse()` function. 
\f2 \uc0\u9989 
\f0 \
3.  *
\f1\b *Find Max/Min:** Write a function to find the largest and smallest number in a list without using the built-in `max()` or `min()` functions.\
4.  **Factorial:** Write a function to calculate the factorial of a number (both iteratively and recursively). 
\f2\b0 \uc0\u9989 
\f0 \
5.  **Check Palindrome:** Write a function to check if a given string is a palindrome (e.g., "radar"). 
\f2 \uc0\u9989 
\f0 \
\
**Medium Level (To test problem-solving and knowledge of data structures)** 
\f1\b\fs32 7
\f0\b0\fs24 \
6.  **Fibonacci Sequence:** Write a function to generate the first `n` numbers in the Fibonacci sequence.\
7.  *
\f1\b *Count Character Frequency:** Write a function that takes a string and returns a dictionary with each character as a key and its frequency as the value.\
8.  **List Comprehensions:** You have a list of numbers: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`. Create a new list 
\f0\b0 containing only the even numbers squared, using a list comprehension. (Result: `[4, 16, 36, 64, 100]`) 
\f2 \uc0\u9989 
\f0 \
9.  **
\f1\b Find Missing Number:** Given a list containing `n` distinct numbers taken from `0, 1, 2, ..., n`, find the one that is missing from the list.\
10. **Two Sum:** Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. (A classic problem to test their approach to optimization).\

\f0\b0 \
**Hard Level (For stronger candidates, tests advanced concepts)** 
\f1\b\fs32 8 AVOID 
\f0\b0\fs24 \
11. 
\f1\b **Flatten a List:** Write a function to flatten a nested list. Example: Input: `[1, [2, 3], [4, [5, 6]]]`, Output: `[1, 2, 3, 4, 5, 6]`. (Tests recursion/generators).\
12. **Implement a Decorator:** Write a simple decorator function `timer` that measures the time taken by any function to execute and prints the duration.\
13. **Prime Numbers:** Write a function to generate a list of prime numbers up to a number `n` using the Sieve of Eratosthenes algorithm.\
14. **Most Frequent Word:** Given a paragraph of text, write a function to return the most frequently occurring word. (Tests string manipulation, dictionaries, and edge cases like punctuation).\

\f0\b0 \
---\
\
### **III. Follow-up & Discussion Questions**\
\
After the coding problem, always discuss their solution. 
\f1\b\fs34 9
\f0\b0\fs24 \
*   **
\f1\b "What is the time and space complexity of your solution?"** (Big-O notation)\
*   **"Can you think of a way to optimize this further?"**\
*   **"How would you handle edge cases? (e.g., empty input, large input, wrong data type)"**\
*   **"How would you test this function?"**
\f0\b0 \
\
\
\
Of course! Here is a curated list of coding questions, perfect for a fresher Python developer interview. They are sorted by category and difficulty.\
\
### **String Manipulation** 
\f1\b\fs36 10
\f0\b0\fs24 \
\
1.  **Palindrome Check**  
\f2 \uc0\u9989 
\f0 \
    *   **Problem:** Write a function to check if a given string is a palindrome (reads the same forwards and backwards). Ignore case and non-alphanumeric characters.\
    *   **Example:** `"A man, a plan, a canal: Panama"` should return `True`.\
    *   **Tests:** Empty string, single character, strings with symbols.\
\
2.  **Reverse a String** 
\f2 \uc0\u9989 
\f0 \
    *   **Problem:** Write a function to reverse a string. Don't use the built-in `reversed()` or `[::-1]`.\
    *   **Example:** `"hello"` -> `"olleh"`\
    *   **Follow-up:** Now do it using `[::-1]` and explain how slicing works.\

\f1\b \

\f0\b0 3.  **Anagram Check** 
\f2 \uc0\u9989 
\f0 \
    *   **Problem:** Write a function to check if two strings are anagrams of each other (contain the same characters in the same frequency).\
    *   **Example:** `"listen"` and `"silent"` are anagrams.\
    *   **Tests:** Strings of different lengths, same strings.\

\f1\b \
4.  **Find the First Non-Repeating Character**\
    *   **Problem:** Given a string, find the first character that occurs only once.\
    *   **Example:** In `"swiss"`, the first non-repeating character is `'w'` (s repeats, i repeats, w is first and unique).\
    *   **Challenge:** Can you do it in a single pass?\
\
5.  **Longest Word in a String**\
    *   **Problem:** Write a function that takes a string and returns the longest word in it. If there are multiple, return the first one.\
    *   **Example:** `"I love Python programming"` -> `"programming"`\
    *   **Tests:** Handle punctuation, e.g., `"Hello, world!"` -> `"Hello"`.\

\f0\b0 \
---\
\
### **Number & Mathematical Operations** 
\f1\b\fs36 11
\f0\b0\fs24 \
\
6.  **Fibonacci Sequence** 
\f2 \uc0\u9989 
\f0 \
    *   **Problem:** Write a function to generate the first `n` numbers in the Fibonacci sequence.\
    *   **Example:** `n = 6` -> `[0, 1, 1, 2, 3, 5]`\
    *   **Follow-up:** Do it both iteratively and recursively. Discuss the time complexity of each.\
\
7.  **Factorial of a Number** 
\f2 \uc0\u9989 
\f0 \
    *   **Problem:** Write a function to calculate the factorial of a non-negative integer `n`.\
    *   **Example:** `5! = 5 * 4 * 3 * 2 * 1 = 120`\
    *   **Follow-up:** Iterative vs. Recursive approach.
\f1\b \
\
8.  **Check Prime Number**\
    *   **Problem:** Write a function to check if a number is prime.\
    *   **Follow-up:** How can you optimize it? (Hint: You only need to check divisors up to the square root of the number).\
\
9.
\f0\b0   **Armstrong Number** 
\f2 \uc0\u9989  
\f0 \
    *   **Problem:** Check if a number is an Armstrong number (aka narcissistic number). This is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\
    *   **Example:** `153` is Armstrong because `1^3 + 5^3 + 3^3 = 153`.
\f1\b \
\
1
\f0\b0 0. **Sum of Digits** 
\f2 \uc0\u9989  
\f0 need
\f2  
\f0 to
\f2  
\f0 visit
\f2  
\f0 once
\f2  
\f0 again
\f2  
\f0 \
    *   **Problem:** Write a function to calculate the sum of the digits of a number.\
    *   **Example:** `1234` -> `1 + 2 + 3 + 4 = 10`\
    *   **Challenge:** Do it without converting the number to a string.
\f1\b \

\f0\b0 \
---\
\
### **List Manipulation & Algorithms** 
\f1\b\fs38 12
\f0\b0\fs24 \
 \
11. **FizzBuzz** 
\f2 \uc0\u9989 
\f0 \
    *   **The Classic:** Print numbers from 1 to n. For multiples of 3, print "Fizz". For multiples of 5, print "Buzz". For multiples of both, print "FizzBuzz".\
    *   **Tests:** This tests basic looping and conditionals.\
\
12. *
\f1\b *Find Max/Min in a List**\
    *   **Problem:** Write a function to find the largest and smallest number in a list without using the built-in `max()` or `min()` functions.\
\
13. **
\f0\b0 Remove Duplicates from a List**\
    *   **Problem:** Write a function that takes a list and returns a new list with duplicates removed, preserving the original order. \
    *   **Example:** `[1, 2, 2, 3, 4, 4, 5]` -> `[1, 2, 3, 4, 5]`  
\f2 \uc0\u9989 
\f0 \
    *   **Follow-up:** Can you do it without using a `set`? Or without using a new list?\
\
14
\f1\b . **Find the Missing Number**\
    *   **Problem:** You are given a list of `n-1` distinct numbers from `1` to `n`. Find the missing number.\
    *   **Example:** Input: `[1, 2, 4, 5, 6]` (n=6), Output: `3`.\
    *   **Challenge:** Find a solution that uses a constant amount of extra space.\
\
15. **Two Sum**\
    *   **Problem:** Given an array of integers `nums` and an integer `target`, return the indices of the two numbers that add up to the `target`.\
    *   **Example:** `nums = [2, 7, 11, 15]`, `target = 9` -> `[0, 1]` (because nums[0] + nums[1] = 2 + 7 = 9).\
    *   **Follow-up:** Can you find a solution more efficient than the naive O(n\'b2) approach? (Hint: Use a dictionary for O(n) time).
\f0\b0 \
\
---\
\
### **Data Structures & Advanced Concepts** 
\f1\b\fs36 13
\f0\b0\fs24 \
\

\f1\b 16. **Implement a Stack using a List**\
    *   **Problem:** Implement a `Stack` class with `push`, `pop`, and `peek` methods.\

\f0\b0 \
17. **Count Character Frequency**\
    *   **Problem:** Write a function that takes a string and returns a dictionary where keys are characters and values are their frequency in the string. 
\f2 \uc0\u9989 
\f0 \
    *   **Example:** `"hello"` -> `\{'h':1, 'e':1, 'l':2, 'o':1\}`\
\

\f1\b 18. **Flatten a Nested List**\
    *   **Problem:** Write a function to flatten an arbitrarily nested list of integers.\
    *   **Example:** Input: `[1, [2, 3], [4, [5, 6]]]`, Output: `[1, 2, 3, 4, 5, 6]`.\
    *   **Follow-up:** This is a great problem to test recursion.
\f0\b0 \
\
19. **List Comprehension Challenge**\
    *   **Problem:** Given a list of numbers `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`, use a list comprehension to create a new list containing only the even numbers squared.\
    *   **Target Output:** `[4, 16, 36, 64, 100]`    
\f2 \uc0\u9989 
\f0 \

\f1\b \
20. **Simple Decorator**\
    *   **Problem:** Write a decorator named `timer` that prints the time taken by a function to execute.\
    *   **Tests their understanding of:** Functions as objects, `*args` and `**kwargs`.\

\f0\b0 \
### **How to Use These Questions in an Interview:** 
\f1\b\fs38 14
\f0\b0\fs24 \
\
*   **Start Easy:** Begin with something like **FizzBuzz** or **Palindrome Check** to calm the candidate's nerves.  
\f2 \uc0\u9989  
\f0 \
*
\f1\b    **Progress to Medium:** Move to problems like **Two Sum** or **Find the Missing Number** to see their problem-solving and optimization skills.\
\
*   **End with a Challenge:** For a strong candidate, finish with **Flatten a Nested List** or the **Decorator** problem to see if they grasp more advanced concepts.\
*   **Always Discuss:** After they write the code, ask about time/space complexity (Big-O) and how they might test their function.\
\
\
\
\
}